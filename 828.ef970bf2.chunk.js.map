{"version":3,"file":"828.ef970bf2.chunk.js","mappings":"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","sources":["webpack://@app/client/./src/game/config/camera.ts","webpack://@app/client/./src/types.ts","webpack://@app/client/./src/game/state/player.ts","webpack://@app/client/./src/game/config/map.ts","webpack://@app/client/./src/game/components/camera/camera.tsx","webpack://@app/client/./src/utils.ts","webpack://@app/client/./src/game/components/map/map.tsx","webpack://@app/client/./src/game/hooks/use-listener.ts","webpack://@app/client/./src/game/types.ts","webpack://@app/client/./src/game/config/player.ts","webpack://@app/client/./src/game/components/player/player.tsx","webpack://@app/client/./src/game/hooks/use-actions.ts","webpack://@app/client/./src/game/config/minimap.ts","webpack://@app/client/./src/game/components/minimap/minimap.tsx","webpack://@app/client/./src/game/game.tsx","webpack://@app/client/./src/pages/home/home.tsx"],"sourcesContent":["import * as THREE from \"three\";\n\nconst cameraConfig = {\n  position: new THREE.Vector3(0, 0, 20),\n};\n\nexport default cameraConfig;\n","import * as THREE from \"three\";\n\nexport enum Direction {\n  none = 0,\n  up = 1,\n  down = 2,\n  left = 3,\n  right = 4,\n}\n\nexport type PlayerState = {\n  direction: Direction;\n  position: THREE.Vector3;\n  velocity: THREE.Vector3;\n  speed: number;\n};\n","import * as THREE from \"three\";\nimport { Direction, PlayerState } from \"@/types\";\n\nconst playerState: PlayerState = {\n  direction: Direction.none,\n  position: new THREE.Vector3(0, 0, 0),\n  velocity: new THREE.Vector3(0, 0, 0),\n  speed: 0.1,\n};\n\nexport default playerState;\n","const mapConfig = {\n  width: 50,\n  height: 50,\n};\n\nexport default mapConfig;\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { PerspectiveCamera } from \"@react-three/drei\";\nimport cameraConfig from \"@/game/config/camera\";\nimport playerState from \"@/game/state/player\";\nimport mapConfig from \"@/game/config/map\";\n\ntype Props = {\n  children?: React.ReactNode;\n};\n\nexport default function Camera({ children }: Props) {\n  const [min, max] = React.useMemo(() => {\n    return [\n      new THREE.Vector3(mapConfig.width * -0.5, mapConfig.height * -0.5, 0),\n      new THREE.Vector3(mapConfig.width * 0.5, mapConfig.height * 0.5, 0),\n    ];\n  }, []);\n\n  useFrame(({ camera }) => {\n    playerState.position\n      .add(playerState.velocity.multiplyScalar(playerState.speed))\n      .clamp(min, max);\n    camera.position.copy(playerState.position);\n    camera.position.z = cameraConfig.position.z;\n    camera.rotation.set(0, 0, 0);\n  });\n\n  return (\n    <>\n      <PerspectiveCamera makeDefault position={cameraConfig.position}>\n        <group position-z={cameraConfig.position.z * -1}>{children}</group>\n      </PerspectiveCamera>\n    </>\n  );\n}\n","export function asset(path: string): string {\n  const url = path.replace(/^\\/+/, \"\");\n  return `${process.env.PUBLIC_PATH}${url}`;\n}\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { useTexture } from \"@react-three/drei\";\nimport mapConfig from \"@/game/config/map\";\nimport { asset } from \"@/utils\";\n\nexport default function Map() {\n  const texture = useTexture(asset(\"/assets/map.png\"));\n\n  React.useMemo(() => {\n    texture.wrapS = THREE.RepeatWrapping;\n    texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat = new THREE.Vector2(\n      mapConfig.width * 0.5,\n      mapConfig.height * 0.5\n    );\n  }, [texture]);\n\n  return (\n    <group>\n      <mesh>\n        <planeBufferGeometry args={[mapConfig.width, mapConfig.height]} />\n        <meshBasicMaterial depthWrite={false} map={texture} />\n      </mesh>\n    </group>\n  );\n}\n","import React from \"react\";\n\nexport default function useListener<K extends keyof WindowEventMap>(\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  const listenerRef = React.useRef(listener);\n  React.useMemo(() => {\n    listenerRef.current = listener;\n  }, [listener]);\n\n  const optionsRef = React.useRef(options);\n  React.useMemo(() => {\n    optionsRef.current = options;\n  }, [options]);\n\n  React.useEffect(() => {\n    window.addEventListener(type, listenerRef.current, optionsRef.current);\n    return () => {\n      window.removeEventListener(type, listenerRef.current, optionsRef.current);\n    };\n  }, [type]);\n}\n","export enum Action {\n  up,\n  down,\n  left,\n  right,\n}\n","const playerConfig = {\n  width: 3,\n  height: 3,\n};\n\nexport default playerConfig;\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport useActions from \"@/game/hooks/use-actions\";\nimport { Action } from \"@/game/types\";\nimport playerState from \"@/game/state/player\";\nimport playerConfig from \"@/game/config/player\";\nimport { Direction } from \"@/types\";\nimport { asset } from \"@/utils\";\n\nexport default function Player() {\n  const actions = useActions();\n\n  const { canvas, ctx, texture } = React.useMemo(() => {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const texture = new THREE.Texture(canvas);\n    texture.minFilter = THREE.NearestFilter;\n    texture.magFilter = THREE.NearestFilter;\n    return { canvas, ctx, texture };\n  }, []);\n\n  React.useEffect(() => {\n    const sprite = new Image();\n    sprite.onload = () => updateSprite();\n    sprite.src = asset(\"/assets/player.png\");\n\n    const frameDelay = 1000 / 8;\n    const framesX = 4;\n    const framesY = 4;\n\n    let nextFrame: number;\n    let frameY = 0;\n    let frameX = 0;\n    let lastFrameTime = 0;\n\n    // @todo clean this up or move it to own file\n    function updateSprite() {\n      nextFrame = requestAnimationFrame(updateSprite);\n\n      const frameWidth = sprite.width / framesX;\n      const frameHeight = sprite.height / framesY;\n\n      canvas.width = frameWidth;\n      canvas.height = frameHeight;\n\n      const now = Date.now();\n      if (now - lastFrameTime < frameDelay) return;\n      lastFrameTime = now;\n\n      switch (playerState.direction) {\n        case Direction.none:\n          frameX = 0;\n          break;\n        case Direction.up:\n          frameY = 3;\n          break;\n        case Direction.down:\n          frameY = 0;\n          break;\n        case Direction.left:\n          frameY = 1;\n          break;\n        case Direction.right:\n          frameY = 2;\n          break;\n      }\n\n      ctx.clearRect(0, 0, frameWidth, frameHeight);\n\n      ctx.drawImage(\n        sprite,\n        frameWidth * frameX,\n        frameHeight * frameY,\n        frameWidth,\n        frameHeight,\n        0,\n        0,\n        frameWidth,\n        frameHeight\n      );\n\n      if (++frameX > framesX - 1) {\n        frameX = 0;\n      }\n\n      texture.needsUpdate = true;\n    }\n\n    return () => cancelAnimationFrame(nextFrame);\n  }, [canvas, ctx, texture]);\n\n  useFrame(() => {\n    let direction: Direction = 0;\n    for (let i = 0, length = actions.length; i < length; i++) {\n      switch (actions[i]) {\n        case Action.up:\n          direction = Direction.up;\n          break;\n        case Action.down:\n          direction = Direction.down;\n          break;\n        case Action.left:\n          direction = Direction.left;\n          break;\n        case Action.right:\n          direction = Direction.right;\n          break;\n      }\n    }\n    switch (direction) {\n      case Direction.none:\n        playerState.velocity.set(0, 0, 0);\n        break;\n      case Direction.up:\n        playerState.velocity.y = 1;\n        break;\n      case Direction.down:\n        playerState.velocity.y = -1;\n        break;\n      case Direction.left:\n        playerState.velocity.x = -1;\n        break;\n      case Direction.right:\n        playerState.velocity.x = 1;\n        break;\n      default:\n        playerState.velocity.set(0, 0, 0);\n    }\n    playerState.direction = direction;\n  });\n\n  return (\n    <group>\n      <mesh>\n        <planeBufferGeometry args={[playerConfig.width, playerConfig.height]} />\n        <meshBasicMaterial depthWrite={false} transparent map={texture} />\n      </mesh>\n    </group>\n  );\n}\n","import React from \"react\";\nimport useListener from \"@/game/hooks/use-listener\";\nimport { Action } from \"@/game/types\";\n\nexport default function useActions(): Action[] {\n  const [actions, setActions] = React.useState<Action[]>([]);\n\n  function getActionFromKey(key: string) {\n    let action: Action;\n    switch (key.toLocaleLowerCase()) {\n      case \"w\":\n      case \"arrowup\":\n        action = Action.up;\n        break;\n      case \"s\":\n      case \"arrowdown\":\n        action = Action.down;\n        break;\n      case \"a\":\n      case \"arrowleft\":\n        action = Action.left;\n        break;\n      case \"d\":\n      case \"arrowright\":\n        action = Action.right;\n        break;\n    }\n    return action;\n  }\n\n  useListener(\"keydown\", (event) => {\n    const action = getActionFromKey(event.key);\n    if (action === undefined) return;\n    setActions((actions) => {\n      if (actions.includes(action)) return actions;\n      return [...actions, action];\n    });\n  });\n\n  useListener(\"keyup\", (event) => {\n    const action = getActionFromKey(event.key);\n    if (action === undefined) return;\n    setActions((actions) => {\n      return actions.filter((item) => item !== action);\n    });\n  });\n\n  return actions;\n}\n","const minimapConfig = {\n  width: 3,\n  height: 3,\n};\n\nexport default minimapConfig;\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport mapConfig from \"@/game/config/map\";\nimport playerConfig from \"@/game/config/player\";\nimport cameraConfig from \"@/game/config/camera\";\nimport minimapConfig from \"@/game/config/minimap\";\nimport playerState from \"@/game/state/player\";\n\nexport default function Minimap() {\n  const groupRef = React.createRef<THREE.Group>();\n  const playerMeshRef = React.createRef<THREE.Mesh>();\n\n  const { size, camera } = useThree();\n\n  React.useEffect(() => {\n    const group = groupRef.current;\n    const cam = camera as THREE.PerspectiveCamera;\n    const fov = THREE.MathUtils.degToRad(cam.fov);\n    const height = 2 * Math.tan(fov / 2) * cameraConfig.position.z;\n    const width = height * cam.aspect;\n    group.position.set(\n      width * -0.5 + minimapConfig.width * 0.5 + 0.5,\n      height * -0.5 + minimapConfig.height * 0.5 + 0.5,\n      group.position.z\n    );\n  }, [size, camera]);\n\n  useFrame(() => {\n    const playerMesh = playerMeshRef.current;\n    playerMesh.position\n      .copy(playerState.position)\n      .multiplyScalar(minimapConfig.width / mapConfig.width);\n  });\n\n  return (\n    <group ref={groupRef}>\n      <mesh>\n        <planeBufferGeometry\n          args={[minimapConfig.width, minimapConfig.height]}\n        />\n        <meshBasicMaterial color=\"black\" depthWrite={false} />\n      </mesh>\n      <mesh ref={playerMeshRef}>\n        <planeBufferGeometry\n          args={[\n            playerConfig.width * (minimapConfig.width / mapConfig.width),\n            playerConfig.height * (minimapConfig.height / mapConfig.height),\n          ]}\n        />\n        <meshBasicMaterial color=\"crimson\" depthWrite={false} />\n      </mesh>\n    </group>\n  );\n}\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Text } from \"@react-three/drei\";\nimport Camera from \"@/game/components/camera/camera\";\nimport Map from \"@/game/components/map/map\";\nimport Player from \"@/game/components/player/player\";\nimport Minimap from \"@/game/components/minimap/minimap\";\n\nexport default function Game() {\n  return (\n    <Canvas flat linear dpr={1}>\n      <React.Suspense fallback={<Text>Loading...</Text>}>\n        <Map />\n        <Camera>\n          <Player />\n          <Minimap />\n        </Camera>\n      </React.Suspense>\n    </Canvas>\n  );\n}\n","import React from \"react\";\nimport Game from \"@/game/game\";\n\nexport default function Home() {\n  return (\n    <>\n      <Game />\n    </>\n  );\n}\n"],"names":["position","THREE","Direction","direction","none","velocity","speed","Camera","children","min","max","React","mapConfig","useFrame","camera","playerState","clamp","copy","z","cameraConfig","rotation","set","PerspectiveCamera","makeDefault","asset","path","url","replace","process","Map","texture","useTexture","wrapS","wrapT","repeat","args","depthWrite","map","useListener","type","listener","options","listenerRef","current","optionsRef","window","addEventListener","removeEventListener","Action","Player","actions","setActions","getActionFromKey","key","action","toLocaleLowerCase","up","down","left","right","event","undefined","includes","filter","item","useActions","canvas","ctx","document","createElement","getContext","minFilter","magFilter","sprite","Image","onload","updateSprite","src","nextFrame","frameY","frameX","lastFrameTime","requestAnimationFrame","frameWidth","width","frameHeight","height","now","Date","clearRect","drawImage","framesX","needsUpdate","cancelAnimationFrame","i","length","playerConfig","transparent","Minimap","groupRef","playerMeshRef","size","useThree","group","cam","fov","Math","tan","aspect","minimapConfig","multiplyScalar","ref","color","Game","flat","linear","dpr","fallback","Text","Home"],"sourceRoot":""}